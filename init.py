import env
import os
import subprocess

SSH_DIR = os.getenv('SSH_DIR', '/root/.ssh')
KAGGLE_DIR = os.getenv('KAGGLE_DIR', '/root/.kaggle')
SSH_PRIV_KEY = os.path.join(SSH_DIR, 'id_rsa')
KAGGLE_JSON = os.path.join(KAGGLE_DIR, 'kaggle.json')


def init():
    subprocess.run(['mkdir', '-p', SSH_DIR])
    subprocess.run(['rm', '-f', SSH_PRIV_KEY])
    subprocess.run(['rm', '-f', KAGGLE_JSON])
    subprocess.run(['mkdir', '-p', KAGGLE_DIR])
    subprocess.run(['pip3', 'install', 'pynacl'])


def write_secrets_to_disk():
    from kaggle_secrets import UserSecretsClient
    import nacl.secret
    import nacl.utils
    secret_label = "priv-key-secret"
    secret_value = UserSecretsClient().get_secret(secret_label)
    key = bytes.fromhex(secret_value)
    box = nacl.secret.SecretBox(key)
    encrypted = b'\xee\x84\xe3\xd6\xe3\x107:\xab\xf6\xf0\xf8\x07YQ\xd9!Pk[A\x8d\xd2\x91\xe3\x86\xc1g\xdb\x9d\x9c\x846\x000r\xab\x10\t\xc0\xaf\x96\xd0\x18ZO\n\xff\xd3:9I\xe6\x80\xc7E\xe6yX\xbf\xdb\xb4\xa9D\xcc\xa0O\xde\xaf\xddj\xc7\x84-\xe1\xcf5\xa5p /\xa7\xc1\xd9-\x9f\xd5\xb2\x84\\=\x06\rg\x0b5\xaa\xc4\xaf\x9b\x90\x18jv\xcb\x15"\xbf5M\x14"\xc69$\x12\x1a\xb3\x04\x10\x01>\xc0\xc7e^\x84T-7\xbb%\x8eP\xb5:CO\xa8h\x0bDz.\x81,\x12\xab\xe4\x9c\xbe\xe3\x1c\xeel\xb5+3><\xfb\xf2qi\xea[\xfbu\x02\'RF\x06E\xd6\xc4\x1d\xb1\xd8\xa9\x91\xed\xbb=\x04\xd6*\xeaI\xd5\xa37V\x03\x83\x8a\xff\x03\xf6\xbf\xb1\xccT]\x07\x06q\xad\xb9\xab\x19scg\x9d\x8e\xd6-6\xcb\x8f.\x9f{\x89\x7fM\x06\xd80\xf5\xf7r\xbc\xd6O\xad_\xec\xa8+\xe0\xa7\xfa0\x11\xb5\xacx\xe6\xd7bw\x7f\'\xda\x14\x14\x1c[X<;\xf6\xbc\xd4\x91\x13\xceb\xf5q\xec\x89]eqO\xaf\x1d\xab\xef\xbe]\xbd\xa8\xe0s\r)O\x84]\xa3Y`SCK\x8e\x1c\x156\nI\xa4\x7f\xc2\x80\xfay\xfd\xc5\xe4\xcb\x8a%K\xa8)\x1a\x84\x86\xd8Z\xa3\x9aS@f\xc8\xfe\\"\x18\xa59\xd7.4\xba]s\x1d`\xf1%\xa33\xf7Q\xc0)d\xc27\xee\x03\x0f!\x90t\x18\xf9T\x17\xbe8\xff\x08\xaa\xd8\xa3\xa1\x07\xd6FMV8h\xfb\x80D\xffWF_\xb5\xca\xa9\xfa\xbf\xe6\xaaY\\}V\t\xcf\xd4\xd7)\x0f{\x15\xb4\x94\xa5[\xe6\xebO\x0b\xb3\xc9T\x1ai\xf5S/\xfcd \xd6\xcb\x0e\x19i\xc3A\xa3\x87$\xa7\x1c\xc6\x84R\x12`\xb2Jz\xbew/.\x8c\xfa<\x05Z\xdc\xf1\xa7\xd5\xb2A\xa4$\xb6\x83&\x80\xb6\xc0\x80t\xa9\xb7Q\xec\x03\x98\t}\x8b\x0eB\xbe\xf2\xd8\xcb1\xca)\x01^49o\xc4\x9c\xb7\xdc\xd4*m\xba\xd7\xba<yZy\t\xac\xc2\xc1)GZ\xc2\x18\xa0\x10\xf9Vd\xdd\x1e\x02Du\xec\x96$.\x1e\xd8Z\xcc\xdc\xa4@.\xa8\xaa\x11s\x1c\x06O\x83Y\xee\xf4F\xa1\xbe"\x18%a\x06\xdf&\xc1\x8d^\xf1\x86}\x01x\xc6J}\x04\xd4`\x9e\xd0\xa2R}\x96\x18\xce\xc8\xa2#\x8b\x85\x9d\x9d6x\x06v\x0c\x1c7:p\xf7h\xf1]\xb34\xae\x9fV\xac\xf79y\xae\x04P}\x05\xaa\xf8\x98\x8a\xac,\xd8\xdaO\xea\x16/\x90:\x16g\xd2%\xe7\xaayV\xae\x92\xb8{\x04\x18\x9a\x89\x0c\r\xea\xf1\xba\xaeY\x01\xfb^\xcf\xaf\x91I\xf9\xe2c\x023E\x1e\xdeZs\x91pep\xac\x9c\xdb \x7f\xb7"\xa5/*!\xca\x83\x98\xb7\x0cE&\xc1\xb7g\xf63\x86\xdc|\x9bY\xd9Y\xdd\xaf\x14\xc5 3\xbe\xa7\x06\x8f\xe2\xe4\xde\xaar\xa8R\xbe\xda\xe6#\xed37n\xf0\xbdT\xa9\xfe\xe0\x1bFl\x89\xe3\x86Zb\xe8\xe9|\x83P\xeaR\xa3\x8e\xd5M\x93  \xb9\xb9U\xc0\x0cM\x91 N\xb1\x10\xdd\xff\r\xe3\x8c"\xa6\xda\xcd\xf6\x9a\xf0@\xb5f\x8c\xc3\xabl:t\xed\x13\x9a\xb1X\x1d\xfcLe\x8coE\xc9PRj\xc46\x12\x93z\xa4"=]4\r\x9fH\x9f4l\r\xbc\xd1?5\xef\xe0\xc4\xc2\xe3x\n\xde\xea\xda\x94\xc5\xab\xdd\xe0\x05\x128\x08\xcf\xd1\xed\x8an\x10k\xe8\x94\xc9)\xa4\x1e\xe4\'\x9b\xdfs]\xc2\x1b#\x1b\xb9\x97m\xb0p\xf7dp\x01\xa3W\xe5\xb6\xd7S\xac\xf6\x96Q\xbdE9["\x87\xc7\\\xd9\xcf\x17\x11fK\xbc\xf6\xb3\x9c`~\xecz\xdeJ\x17\xe5\x95\xaa\x144\xd7/\xc3\xcd=\xa5o\xe3\xbf\x93q\x01\xca\xd7\x88\xe2KQ\xc6\x1c\x16_\x19t\xa7\x8fK-|B\xaf\xbf\xe9f\xda\x98A\x1b\x9dj\x1f\xb7\xda\x07\xbb\x8d\xe61\xe3`0\xd4\xc0\x19y^ID^\xa06\xb6\x0ff\x9eu\xec\xb4f\x99\x8aC\xa1Syj\xbd\xf8\xc24\x87\xab\x17\xb1<\xe28o\x04\x0b*\xb3|\x1e\x8c\xff\x8f\xc8\x8cl\x8d\xa0\xa9\xa5\r\xe4\xdev\xc7\x95\xad\x86T~Hw\xdf\xab\xe0 \xe6W\xc5?\xc0\xff\xbcV7\xc2\xc6\xfax,T\xf9\x05M9\xed\xed\xd0\x8eo\x9a\xe83=i5\xbe\xf7\t\xa2r\xab\xcb\xd3\xfcw\x02\xf6\xb5\x9dZQ\xf0\x94\x15u\xbf\xc3\xe6f/\x92\xc8\xf4\ry\x13\x94em\\\xb2\xc9\xab\xa70\x0fV\xbbGl\xb6\x10UiZ?\xfa\x81\xd9\x9c6d|\'\xa4\x03\x17\xe2\xed\xe4\xca\xd2xw\xa6Q#1@(\x11\x1b\x9b\xd4\xa78te"\xd4\xf5)\x9e\xc6J\x83\xe5\xa6\xa7{V\x86!\x02TLd\x05?f1Js\x16\xdf\xfc\xc0q9\xde\xf3\xab\x12\t\xa8V\xa1i\xd4\xf3f/\xd22=\xd0\xc0\x99\x83j\x15\x81\x97\x96\xb3\xe8\x00p\x86\xc0\x0b\xd7(_%\xe7\xee\xdeo8\xfd$\x0b1\x04\xf3\xe9\xc3`\\\x8b"(\xab/\x1d8\xa7\x98\x818y\xeb\'K\x9f\x94\x90\xbc\xd0\x14\x03\'\xcf\x8eQM\xa0\x05\xb8f\xf7\xe9\xab\x9f\xe9RB\xd9\xd1\x19\xf7\xf9f\xb9\xc9w\xefI\xa6\xec\x04\xf5\x90J\xd8\xeae$\xb9\x04\xb3\xce\xf1E\xa3\r1\xc5\x05\xa1\xe0xz$\xe3\xaa\xf4]\x06\x07\xa5Fq\xfe\xbd\x81\xee\xa2\xda)\xf5_\x809\xfaV\xee%\xcc\x9bz\xd28\xa4\xd9\xf7Y\xea\xf0-\x97\n\xaft1\x07\x96f\xecC;\xff*\xbdp\xa5_\xbd\x16F\x82\xae\xa9T#\x15\xa4iM;\x1f\xf6\x9a\x9dF\x88\xde\x17e\xc3_ \xdf\xba\xbe\xb7\xf9m\xd0\xe9\xdf>\xfe\xf7\xde^\xeb\x81\xbd\x99\xaa=f\xde2\xc0D\xf97\xd6\x00vZq\x16\xc4\x1a\xed\xa2\xb1\x1fd\xb2\xa4\xbf\xdfw=r\xde\xc6\x1bIALs\x8d^K\x19w\xc9\xfav\t6\xeb\x9c \xe5l\xeb\x9ay\xae\x95\x12\x19 \xe7\xd5\xf7iU\xff\xbe\xe8\r\xd6\xe4;\xc3\xedn\x8e\x7f\x17I\x89s\n\xd8\xfa\xfffF\xf9\xe5\xf7-\xc9$\xc2;1\xec\xce\xb1\xa9\x1c)\xf8\x96h\xe0\x01\xab\xbd\xef\xef\x08@\x14\x9cG\xf2\xa4KW\xf4K\xf1\xe4\x0c\xd52\x8a\x96L3\xc7\x1e\xd5\x14\xd5\x0e8\x83\xfe\xe1\xd9\x1eBE9.jp\xdb\xf3X\xe7\xd3s4\xad\x0c\xf32)q\xb9e\xe1:\xdf%\x9f\xceo|\xf6\xc9\x0f\x08\xd5\x18\xa1i(\x9a\x0envG0m\xf9g9\xb7.b]\xd6gx:n%\xe0\xea\xd1\xe0.\xdc\x98x\xf2\xf9\xc5\x1e}\x08RX\xca\xb3!X\xb2\x0cB\xea<\xf6\xb4Z\xb5\xd1o^.\x8b\x91m\xd9`\xe8\x8ao\xb6\xc3<Q\xc45\xa9\x80\xaa\t\xf4\xca\xcc\x8b\x0em*\x1e\xf0\x8aQ\xdfv\x80i\xb9\xe7\xf2\xbb\xf8\x81\xcbc\x99\xfb\x15\x07T\xd4\xff\xf49py|\x10\xa1\xa1\xba\xd5^\xe5\xc8\xcc\xe2\xdc\x8a\x90\xbdo\xba\xa6\x15\x85\x8a\xfe\x08g\'\xf1\x85\xbf\xcd\xca('
    plaintext = box.decrypt(encrypted).decode('utf-8')
    with os.fdopen(os.open(SSH_PRIV_KEY, os.O_WRONLY | os.O_CREAT | os.O_TRUNC, 0o400), 'w') as fp:
        fp.write(plaintext)
    # Write kaggle secret
    secret_label = "kaggle-secret"
    secret_value = UserSecretsClient().get_secret(secret_label)
    with os.fdopen(os.open(KAGGLE_JSON, os.O_WRONLY | os.O_CREAT | os.O_TRUNC, 0o600), 'w') as fp:
        fp.write(secret_value)


if __name__ == '__main__':
    init()
    write_secrets_to_disk()
